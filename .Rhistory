sn.csv <- read.csv("/Users/singhr/testcode/R_Exercise/Ch02/02_04/social_network.csv", header = T)
# CSV FILES
# R converts missing to "NA"
# Don't have to specify delimiters for missing data
# because CSV means "comma separated values"
# "header = T" means the first line is a header
# This first one will not work because of the backslashes
sn.csv <- read.csv("/Users/singhr/testcode/R_Exercise/Ch02/02_04/social_network.csv", header = T)
# CSV FILES
# R converts missing to "NA"
# Don't have to specify delimiters for missing data
# because CSV means "comma separated values"
# "header = T" means the first line is a header
# This first one will not work because of the backslashes
sn.csv <- read.csv("testcode/R_Exercise/Ch02/02_04/social_network.csv", header = T)
# CSV FILES
# R converts missing to "NA"
# Don't have to specify delimiters for missing data
# because CSV means "comma separated values"
# "header = T" means the first line is a header
# This first one will not work because of the backslashes
sn.csv <- read.csv("/Users/singhr/Documents/testcode/R_Exercise/Ch02/02_04/social_network.csv", header = T)
str(sn.csv)
ls()
# Sex vector
sex_vector <- c("Male", "Female", "Female", "Male", "Male")
# Convert sex_vector to a factor
factor_sex_vector <- factor(sex_vector)
factor_sex_vector
?factor
x <- c("test", "test1")
x.asCharacter()
as.character(x)
x <- c("0", "1")
as.character(x)
is.character(x)
x
y <- c(0,1)
y
as.character(y)
is.character(y)
#Create ordinal factor - order is important
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
# Sex vector
sex_vector <- c("M","F","M","mM")
# Convert sex_vector to a factor  - nominal
factor_sex_vector <- factor(sex_vector)
factor_sex_vector
# Sex vector
sex_vector <- c("M","F","M","M")
factor_sex_vector
# Sex vector
sex_vector <- c("M","F","M","M")
# Convert sex_vector to a factor  - nominal
factor_sex_vector <- factor(sex_vector)
factor_sex_vector
levels(factor_sex_vector) <- c("Female", "Male")
factor_sex_vector
summary(sex_vector)
summary(factor_sex_vector)
#Create ordinal factor - order is important
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
t2 <- factor_temperature_vector[2]
t2
# Sex vector
sex_vector <- c("M","F","M","M","F","F")
#Create ordinal factor - order is important
temperature_vector <- c("High", "Low", "High","Low", "Medium")
#create dataframe
df1 <- data.frame(sex_vector,temperature_vector)
#create dataframe
df1 <- data.frame(sex_vector,temperature_vector)
# Sex vector
sex_vector <- c("M","F","M","M","F")
#create dataframe
df1 <- data.frame(sex_vector,temperature_vector)
str(df1)
head(df1)
#select rows, columns
df1[1:2,2:3]
#select rows, columns
df1[1:3,1:2]
df1[2,]
df1["sex_vector",]
df1["sex_vector",]
df1[,"sex_vector"]
df1$sex_vector
df1[,"sex_vector"]
df1[,"sex_vector"]
df1[1:2,"sex_vector"]
#create dataframe
df1 <- data.frame(sex_vector,temperature_vector)
df1 <- data.frame(sex_vector,temperature_vector)
str(df1)
head(df1)
#select rows, columns
df1[1:3,1:2]
df1[2,]
dfdf1["sex_vector"]
df1[1:2,"sex_vector"]
df1[1:2,"sex_vector"]
df1[ ,"sex_vector"]
df1$sex_vector
?subset
logical <- c(TRUE,FALSE,TRUE,FALSE,FALSE)
#create dataframe
df1 <- data.frame(sex_vector,temperature_vector,logical)
str(df1)
head(df1)
#select rows, columns
df1[1:3,1:2]
df1[2,]
df1$sex_vector
subset(df1, subset=logical)
subset(df1, sex_vector="F")
subset(df1, sex_vector="F")
subset(df1, sex_vector=="F")
subset(df1, subset=!logical)
subset(df1, subset=!logical)
# ordering values
a <- c(100, 10, 1000)
order(a)
a[order(a)]
order[df1]
order(df1)
df1
order(df1$sex_vector)
df1
df1[order(df1$sex_vector)]
df1[,order(df1$sex_vector)]
df1[order(df1$sex_vector),]
#named lists
mov <- c("Shining")
act <- c("Jack Nicholson" ,  "Shelley Duvall" )
rev <- data.frame(c(4.5,4.0,5.0),c("IMDb1","IMDb2","IMDb1"))
shining_list <- list(moviename = mov,actors=act,reviews=rev)
shining_list
#use [[]] to retrieve elements from list
shining_list[[2]]
shining_list[["reviews"]]
shining_list$reviews
shining_list[[2][1]]
shining_list[[2]][1]
#add elements to a list
ext_list <- c(my_list, my_name = my_val)
ext_list
#add elements to a list
ext_list <- c(shining_list, my_name = c(1997))
ext_list
#add elements to a list
ext_list <- c(shining_list, year = c(1997))
ext_list
TRUE == FALSE
"hell" != "heaven"
"hello" > "goodbye"
qnorm(seq(0.01,0.99,0.01))
quantile(rnorm(200),probs = seq(0.01,0.99,0.01))
help(quantile)
quantile(c(1,2,3,3,4,5),probs=seq(0,1,0.25))
quantile(c(1,2,3,3,4,5,4),probs=seq(0,1,0.25))
quantile(c(1,2,3,3,4,5,4,3,5),probs=seq(0,1,0.25))
qqnorm(trees$Height)
str(trees)
trees$Height
quantile(trees$Height,probs=seq(0,1,0.25))
qqnorm(trees$Height)
help(qqnorm)
qqnorm(trees$Height,trees$Girth)
help(qqnorm)
qqplot(trees$Height,trees$Girth)
quantile(trees$Girth,probs=seq(0,1,0.25))
TRUE<FALSE
v1 <- c(13,4,7,15)
v2 <- c(15,2,9,10)
v2 >= 10
v1 >= v2
#construct matrix
mat3R3 <- matrix(1:9, byrow = TRUE, nrow = 3)
mat3R3
is.numeric("hello")
c(TRUE,FALSE,TRUE) & c(TRUE,TRUE,TRUE)
c(TRUE,FALSE,TRUE) & c(TRUE,TRUE,TRUE)
)
c(TRUE,FALSE,TRUE) & c(TRUE,TRUE,TRUE)
c(TRUE,FALSE,TRUE) && c(TRUE,TRUE,TRUE)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
return_jedi <- c(309.306, 165.8)
box_office <- c(new_hope, empire_strikes, return_jedi)
star_wars_matrix <- matrix(box_office, byrow=TRUE,nrow=3)
star_wars_matrix
box_office
x <- 5
y <- 7
!(!(x < 4) & !!!(y > 12))
!!(y>12)
!!!(y>12)
x <- -3
if(x < 0){
print("x is negative")
}
else {
print("x is 0 or greater")
}
x <- -3
if(x < 0){
print("x is negative")
}elseif (x == 0) {
print("x is 0")
} else {
print("x is  greater than 0")
}
if(x < 0){
print("x is negative")
}
if(x < 0){
print("x is negative")
}elseif (x == 0) {
print("x is 0")
} else {
print("x is  greater than 0")
}
x <- -3
if(x < 0){
print("x is negative")
} else if (x == 0) {
print("x is 0")
} else {
print("x is  greater than 0")
}
ctr <- 1
while(ctr <= 7)
{
print(paste("value of ctr is",ctr))
ctr <- ctr +1
}
?paster
?paste
ctr
i<-9
i<-9
i%%8
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
box_office <- c(new_hope, empire_strikes, return_jedi)
star_wars_matrix <- matrix(box_office, byrow=TRUE,nrow=3)
star_wars_matrix
#Give names to rows/columns
region <- c("US", "non-US")
titles <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
rownames(star_wars_matrix) <- titles
colnames(star_wars_matrix) <- region
#direcly give names while creating matrix
star_wars_matrix2 <- matrix(box_office, nrow = 3, byrow = TRUE,
dimnames = list(c("A New Hope", "The Empire Strikes Back", "Return of the Jedi"),
c("US", "non-US")))
for(movie in star_wars_matrix2) { print(movie)}
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
box_office <- c(new_hope, empire_strikes, return_jedi)
star_wars_matrix <- matrix(box_office, byrow=TRUE,nrow=3)
star_wars_matrix
for(movie in star_wars_matrix) { print(movie)}
#break, next -similar to continue
for(i in 1:length(v1)) {print(v1[i])}
#break, next -similar to continue
for(i in 1:length(v1)) {print(paste(v1[i], "is in position ",i)}
#break, next -similar to continue
for(i in 1:length(v1)) {print(paste(v1[i], "is in position ",i))}
mov <- c("Shining")
act <- c("Jack Nicholson" ,  "Shelley Duvall" )
rev <- data.frame(c(4.5,4.0,5.0),c("IMDb1","IMDb2","IMDb1"))
shining_list <- list(moviename = mov,actors=act,reviews=rev)
shining_list
#use [[]] to retrieve elements from list
shining_list[[2]]
shining_list[["reviews"]]
shining_list$reviews
shining_list[[2]][1]
for(i in 1:nrow(star_wars_matrix2)) {
for (j in ncol(star_wars_matrix2)){
print(star_wars_matrix2[i][j])
}
}
for (j in ncol(star_wars_matrix)){
print(star_wars_matrix2[i][j])
}
for(movie in star_wars_matrix) { print(movie)}
for(i in 1:nrow(star_wars_matrix)) {
for (j in 1:ncol(star_wars_matrix)){
print(star_wars_matrix2[i][j])
}
}
star_wars_matrix
for(i in 1:nrow(star_wars_matrix)) {
for (j in 1:ncol(star_wars_matrix)){
print(star_wars_matrix[i][j])
}
}
for(i in 1:nrow(star_wars_matrix)) {
print(star_wars_matrix[i])
for (j in 1:ncol(star_wars_matrix)){
print(star_wars_matrix[i][j])
}
}
star_wars_matrix
str(star_wars_matrix)
for(movie in star_wars_matrix) { print(movie)}
for(i in 1:nrow(star_wars_matrix)) {
print(star_wars_matrix[i])
for (j in 1:ncol(star_wars_matrix)){
print(star_wars_matrix[i,j])
}
}
for(i in 1:nrow(star_wars_matrix)) {
print(star_wars_matrix[i,])
for (j in 1:ncol(star_wars_matrix)){
print(star_wars_matrix[i,j])
}
}
#adding contents of 2 vectore
A_vector <- c(1, 2, 3)
stddev <- std(x=A_vector)
stddev <- sd(x=A_vector)
stddev
stddev <- sd(c(1,5,6,NA))
stddev
.17*40
sd(c(1,5,6,NA),TRUE)
sd(c(1,5,6,NA),na.rm =TRUE)
args(sd)
triple <- function(x)
{
3*x
}
triple(6)
math_magic <- function(a,b=1)
{
c=a*b+a/b
return(c)
}
math_magic(4)
math_magic(4,0)
math_magic <- function(a,b=1)
{
if (b ==0)
{
return(0)
}
c=a*b+a/b
return(c)
}
math_magic(4,0)
search()
# CSV FILES
# R converts missing to "NA"
# Don't have to specify delimiters for missing data
# because CSV means "comma separated values"
# "header = T" means the first line is a header
# This first one will not work because of the backslashes
sn.csv <- read.csv("/Users/singhr/Documents/testcode/R_Exercise/Ch02/02_04/social_network.csv", header = T)
str(sn.csv)
qnorm(seq(0.01,0.99,0.01))
quantile(rnorm(200),probs = seq(0.01,0.99,0.01))
quantile(c(1,2,3,3,4,5,4,3,5),probs=seq(0,1,0.25))
qqnorm(trees$Height)
str(trees)
trees$Height
quantile(trees$Height,probs=seq(0,1,0.25))
qqplot(trees$Height,trees$Girth)
quantile(trees$Girth,probs=seq(0,1,0.25))
search()
qplot(trees$Height,trees$Girth)
library("ggplot2")
install.packages("ggplot2")
exp(-3:3)
v <- lapply(c(13,4,7,15), mean)
)
v <- lapply(c(13,4,7,15), mean))
x <- c(13,4,7,15)
v <- lapply(x,mean)
v
?quantile
quantile(x, probs=1:3/4)
1:3/4
0:1
1:1/2
1:2/5
1:4/5
2:3/4
1:3/4
5:3/4
1:.75
1:0.75
1:3/4
5:3
1:3
(1:3)/4
lapply(c("test","rtrwey"),nchar)
unlist(lapply(c("test","rtrwey"),nchar))
sapply(c("test","rtrwey"),nchar)
sapply(c("test","rtrwey"),nchar, USE.NAMES = FALSE)
?gsub
#Arrays
roulette_vector <- c(-24, -50, 100, -350, 10)
# The variable days_vector
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
#assign names
names(roulette_vector) <- days_vector
#disply contents of vector
roulette_vector
vec2 <- c("a", "b", "c", NA)
vec2
is.na(vec2)
vec2[!is.na(vec2)]
?gl
vec4 <- gl(4, 1, 4, label = c("l1", "l2", "l3", "l4"))
vec4
sort(vec4)
linkedin <- list(16, 9, 13, 5, 2, 17, 14)
vc_li <- unlist(linkedin)
append(c(1,3),c(4,5))
?regex
?gsub
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
grepl("edu",emails)
# Use grep() to match for "edu", save result to hits
hits <- grep("edu", emails)
which(grepl("edu",emails))
# Subset emails using hits
emails[hits]
?regerx
?regex
Sys.Date()
class(Sys.Date())
Sys.time()
my_date <- as.Date("1970-10-23")
my_date
my_date <- as.Date("1970-14-03")
my_date <- as.Date("1970-14-03", format="%Y-%d-%m" )
my_date
my_time <- as.POSIXct("2018-07-23 18:10:30 CDT")
my_time
my_time <- as.POSIXct("2018-07-23 18:10:30")
my_time
my_time <- as.POSIXct("2018-07-23 18:10:30 PST")
my_time
unclass(my_date)
binom.test(51,235,(1/6),alternative="less")
binom.test(51,235,(1/6),alternative="greater")
?binom.test
dir()
setwd("~/Documents/testcode/R_Exercise")
dir()
ls()  # List objects
# CSV FILES
# R converts missing to "NA"
# Don't have to specify delimiters for missing data
# because CSV means "comma separated values"
# "header = T" means the first line is a header
# This first one will not work because of the backslashes
sn.csv <- read.csv("/Users/singhr/Documents/testcode/R_Exercise/Ch02/02_04/social_network.csv", header = T)
# Need to either double up the backslashes...
#sn.csv <- read.csv("C:\\Users\\Barton Poulson\\Desktop\\social_network.csv", header = T)
# Or replace with forward slashes
#sn.csv <- read.csv("C:/Users/Barton Poulson/Desktop/social_network.csv", header = T)
str(sn.csv)
summary(sn.csv)
#use square bracket, index starts with1
b1 = B_vector[1]
#select multiple elements by giving collection within [], selection by position or name
b122 = B_vector[c(1,3)]
b1
# Sex vector
sex_vector <- c("M","F","M","M","F")
# Convert sex_vector to a factor  - nominal
factor_sex_vector <- factor(sex_vector)
# Convert sex_vector to a factor  - nominal
factor_sex_vector <- factor(sex_vector)
factor_sex_vector
levels(factor_sex_vector) <- c("Female", "Male")
factor_sex_vector
summary(sex_vector)
#Create ordinal factor - order is important
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
t2 <- factor_temperature_vector[2]
# Sex vector
sex_vector <- c("M","F","M","M","F")
#create dataframe
df1 <- data.frame(sex_vector,temperature_vector,logical)
str(df1)
head(df1)
#select rows, columns
df1[1:3,1:2]
gender <- c(rep("male",20), rep("female", 30))
gender
?rep
gender <- factor(gender)
summary(gender)
rating <- ordered(rating)
help(class)
?read.csv2
